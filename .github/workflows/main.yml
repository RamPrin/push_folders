on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'On which branch to run'
        required: true
      build:
        description: 'Build images'
        required: false
        default: true
        type: choice
        options:
        - true
        - false
jobs:
  build_push:
  environment: ${{ inputs.branch }}
  runs-on: ubuntu-latest
    - name: "Install aws cli"
      if: ${{ secrets.REGISTRY_TYPE == 'ecr*' }}
      uses: unfor19/install-aws-cli-action@v1
    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
    
    - name: Docker Login
      run: |
        if [[ ${{ secrets.REGISTRY_TYPE }} == ecr* ]];
        then
          if [[ ${{ secrets.REGISTRY_TYPE}} == 'ecr-private' ]];
            then
              image_url=${{ secrets.REGISTRY_ID }}.dkr.ecr.us-east-1.amazonaws.com
            else
              image_url=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_ID }}
          fi
          echo 'Log in via AWS CLI'
          aws configure set aws_access_key_id ${{ secrets.IMAGE_USERNAME }}
          aws configure set aws_secret_access_key ${{ secrets.IMAGE_PASSWORD }}
          aws configure set region us-east-1
          if [[ ${{ secrets.REGISTRY_TYPE}} == 'ecr-private' ]];
          then
            token=$(aws ecr get-login-password)
          else
            token=$(aws ecr-public get-login-password)
          fi
          username=AWS
        else
          echo 'Default log in'
          username=${{ secrets.IMAGE_USERNAME }}
          token=${{ secrets.IMAGE_PASSWORD}}
        fi
        echo "$username" >> USERNAME
        echo "$token" >> PASSWORD
        echo $token | docker login --username $username --password-stdin $image_url || \
        { echo "::error::Failed to log in" ; exit 1 ;}
      id: docker_login
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Malevich
      run: |
        pip install malevich-space>=0.2.3 || { echo "::error::Failed to install malevich" ; exit 1 ;}
    
    - name: Get branch name
      run: echo "branch=$(git branch --show-current)" >> $GITHUB_OUTPUT
      id: extract_branch
    
    - name: Build, Test and Push
      run: |
        dirs=$(git log --name-only --diff-filter=d -1 | grep '/' | cut -d '/' -f1 | sort -u)
        errors=()
        if [[ ${dirs[0]} == "" ]];
        then
          echo "No changed directories, exiting..."
          exit 0
        fi
        if [[ ${{ secrets.REGISTRY_TYPE}} == 'ecr-private' ]];
        then
          image_url=${{ secrets.REGISTRY_ID }}.dkr.ecr.us-east-1.amazonaws.com
        else
          image_url=${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_ID }}
        fi
        for dir in $dirs
        do
          name=$(basename $dir)
          if [[ -e $dir ]] && [[ $name != .* ]] && [[ -f $name/Dockerfile ]];
          then
            if [[ ${{ inputs.build }} == true ]];
            then
              echo "Building ${name}"
              docker build -q -t $image_url/$name:${{ github.sha }} $dir || { echo "::warning::Failed to build ${name}" ; errors+=("${name}") ; continue ;}
              if [[ ${{ secrets.REGISTRY_TYPE}} == ecr* ]];
              then
                echo "Finding/Creating AWS repository"
                if [[ ${{ secrets.REGISTRY_TYPE}} == "ecr" ]];
                then
                  aws ecr-public describe-repositories --repository-names $name > /dev/null || \
                  aws ecr-public create-repository --repository-name $name > /dev/null 
                else
                  aws ecr describe-repositories --repository-names $name > /dev/null || \
                  aws ecr create-repository --repository-name $name > /dev/null
                fi
              fi  
              echo "Pushing ${name}"
              docker push -q --all-tags $image_url/$name || { echo "::warning::Failed to push ${name}" ; errors+=("${name}") ; continue ;}
            fi
            
            mkdir space_out

            if [[ -f .github/workflows/app.py ]];
            then
              python3 .github/workflows/app.py --path $name/space.yml --url $image_url/$name:${{ github.sha }} --out space_out/$name.yml
            fi

            echo -n "Testing ${name} "  
            if [[ ${{ secrets.IMAGE_USERNAME }} == "$(cat USERNAME)" ]] && [[ ${{ secrets.IMAGE_PASSWORD}} == "$(cat PASSWORD)" ]];
            then
              echo "with credentials"
              space ci report ./$dir ${{ steps.extract_branch.outputs.branch }} \
              ${{ github.sha }} "$(git log | grep -P "commit [a-z0-9]{40}" -m 1 | cut -d ' ' -f2 | git log --format=%B -n 1)" done \
              $image_url/$name:${{ github.sha }} \
              --image-user=$(cat USERNAME) --image-token=$(cat PASSWORD) \
              --space-username=${{ secrets.SPACE_USERNAME }} --space-password=${{ secrets.SPACE_PASSWORD }} --space-org=${{ secrets.ORG_ID }} \
              ${{ secrets.API_URL }} || { echo "::warning::Failed to report" ; errors+=("${name}") ;}
            else
              echo "without credentials"
              space ci report ./$dir ${{ steps.extract_branch.outputs.branch }} \
              ${{ github.sha }} "$(git log | grep -P "commit [a-z0-9]{40}" -m 1 | cut -d ' ' -f2 | git log --format=%B -n 1)" done \
              $image_url/$name:${{ github.sha }} \
              --space-username=${{ secrets.SPACE_USERNAME }} --space-password=${{ secrets.SPACE_PASSWORD }} --space-org=${{ secrets.ORG_ID }} \
              ${{ secrets.API_URL }} || { echo "::warning::Failed to report ${name}" ; errors+=("${name}") ;}
            fi  
            if [[ ${{ inputs.build }} == true ]];
            then
              echo "Tagging ${name} as latest and pushing"
              docker tag $image_url/$name:${{ github.sha }} $image_url/$name:latest
              docker push -q --all-tags $image_url/$name || { echo "::warning::Failed to push ${name} as latest" ; errors+=("${name}") ; continue ;}
            fi
          fi
        done
        if [[ ${#errors[@]} > 0 ]];
        then
          echo "::error::Failed apps: ${errors[@]}"
        fi
    - uses: actions/upload-artifact@v3
      with: 
        name: space_out
        path: space_out/
    - run: |
        rm USERNAME
        rm PASSWORD
        rm -rf space_out
        docker logout

  load_cfgs:
    needs: build_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: apps
          fetch-depth: 0
      - uses: actions/download-artifact@v3
        with:
          name: space_out
          path: space_out
      - run: |
          for d in space_out/*
          do
            name=$(basename $d)
            if [[ -f $name ]];
            then
              echo "::notice::Changing ${name}"
            else
              echo "::notice::Adding ${name}"
            fi
          done
      - run: rm -rf space_out
      - uses: actions-js/push@v1.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: apps 
          